version: '3.8'

# Production Docker Compose Configuration for Digital Ocean
# Use this configuration for production deployment

services:
  postgres:
    image: postgres:15-alpine
    container_name: pafm-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - pafm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  burial-cemetery:
    build:
      context: ./services/burial-cemetery
      dockerfile: Dockerfile
    container_name: pafm-burial-cemetery
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      UPLOAD_DIR: /app/uploads
    volumes:
      - burial_uploads:/app/uploads
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pafm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  asset-inventory:
    build:
      context: ./services/asset-inventory
      dockerfile: Dockerfile
    container_name: pafm-asset-inventory
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pafm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 192M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  facility-management:
    build:
      context: ./services/facility-management
      dockerfile: Dockerfile
    container_name: pafm-facility-management
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3005
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      UPLOAD_DIR: /app/uploads
    volumes:
      - facility_uploads:/app/uploads
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pafm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 192M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  parks-recreation:
    build:
      context: ./services/parks-recreation
      dockerfile: Dockerfile
    container_name: pafm-parks-recreation
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pafm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 192M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  water-drainage:
    build:
      context: ./services/water-drainage
      dockerfile: Dockerfile
    container_name: pafm-water-drainage
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3006
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "3006:3006"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pafm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 192M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pafm-frontend
    restart: always
    environment:
      NODE_ENV: production
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      BACKEND_URL: ${BACKEND_URL}
      ASSET_INVENTORY_URL: ${ASSET_INVENTORY_URL}
      FACILITY_MANAGEMENT_URL: ${FACILITY_MANAGEMENT_URL}
      PARKS_RECREATION_URL: ${PARKS_RECREATION_URL}
      WATER_DRAINAGE_URL: ${WATER_DRAINAGE_URL}
    ports:
      - "3000:3000"
    depends_on:
      - burial-cemetery
      - asset-inventory
      - facility-management
      - parks-recreation
      - water-drainage
    networks:
      - pafm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  burial_uploads:
    driver: local
  facility_uploads:
    driver: local

networks:
  pafm-network:
    driver: bridge
