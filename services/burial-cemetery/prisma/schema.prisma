// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  passwordHash   String?
  role           Role     @default(CITIZEN)
  fullNameFirst  String
  fullNameMiddle String?
  fullNameLast   String
  nameSuffix     String?
  contactNo      String?
  address        String?
  organization   String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Social login providers
  googleId   String?
  facebookId String?

  // Relations
  deathRegistrations  DeathRegistration[]
  permitRequests      PermitRequest[]
  certificateRequests CertificateRequest[]
  auditLogs           AuditLog[]
  notifications       Notification[]
  payments            Payment[]
  plotAssignments     PlotAssignment[]
  uploadedDocuments   Document[]           @relation("DocumentUploader")
  reservedPlots       CemeteryPlot[]       @relation("PlotReserver")

  @@map("users")
}

model DeathRegistration {
  id                    Int                     @id @default(autoincrement())
  registrationType      RegistrationType
  deceasedId            Int?
  submittedBy           Int?
  informantName         String?
  informantRelationship String?
  informantContact      String?
  status                DeathRegistrationStatus @default(SUBMITTED)
  amountDue             Decimal                 @default(0.00)
  paymentId             Int?
  paymentOrderNo        String?
  orNumber              String?
  processingDueAt       DateTime?
  registeredAt          DateTime?
  registeredBy          Int?
  pickupRequired        Boolean                 @default(true)
  pickupStatus          PickupStatus            @default(NOT_READY)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  remarks               String?

  // Relations
  submitter User?                       @relation(fields: [submittedBy], references: [id])
  deceased  DeceasedRecord?             @relation(fields: [deceasedId], references: [id])
  payment   Payment?                    @relation(fields: [paymentId], references: [id])
  documents DeathRegistrationDocument[]

  @@map("death_registrations")
}

model DeceasedRecord {
  id               Int       @id @default(autoincrement())
  firstName        String
  middleName       String?
  lastName         String
  suffix           String?
  sex              String?
  dateOfBirth      DateTime?
  dateOfDeath      DateTime?
  age              Int?
  placeOfDeath     String?
  residenceAddress String?
  citizenship      String?
  civilStatus      String?
  occupation       String?
  causeOfDeath     String?
  covidRelated     Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  deathRegistrations  DeathRegistration[]
  permitRequests      PermitRequest[]
  certificateRequests CertificateRequest[]
  plotAssignments     PlotAssignment[]

  @@map("deceased_records")
}

model PermitRequest {
  id             Int          @id @default(autoincrement())
  permitType     PermitType
  citizenUserId  Int?
  deathId        Int?
  status         PermitStatus @default(SUBMITTED)
  amountDue      Decimal      @default(0.00)
  paymentId      Int?
  paymentOrderNo String?
  orNumber       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  issuedAt       DateTime?
  issuedBy       Int?
  pickupRequired Boolean      @default(true)
  pickupStatus   PickupStatus @default(NOT_READY)
  remarks        String?

  // Relations
  citizen         User?            @relation(fields: [citizenUserId], references: [id])
  deceased        DeceasedRecord?  @relation(fields: [deathId], references: [id])
  payment         Payment?         @relation(fields: [paymentId], references: [id])
  documents       PermitDocument[]
  plotAssignments PlotAssignment[]

  @@map("permit_requests")
}

model CertificateRequest {
  id                     Int               @id @default(autoincrement())
  certRequestType        CertificateType
  deathId                Int?
  requesterUserId        Int?
  relationshipToDeceased String?
  purpose                String?
  copies                 Int               @default(1)
  status                 CertificateStatus @default(SUBMITTED)
  amountDue              Decimal           @default(0.00)
  paymentId              Int?
  paymentOrderNo         String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  processedBy            Int?
  pickupRequired         Boolean           @default(true)
  pickupStatus           PickupStatus      @default(NOT_READY)
  remarks                String?

  // Relations
  requester User?                        @relation(fields: [requesterUserId], references: [id])
  deceased  DeceasedRecord?              @relation(fields: [deathId], references: [id])
  payment   Payment?                     @relation(fields: [paymentId], references: [id])
  documents CertificateRequestDocument[]

  @@map("certificate_requests")
}

model Document {
  id            Int      @id @default(autoincrement())
  uploadedBy    Int?
  fileName      String
  filePath      String
  mimeType      String?
  fileSizeBytes BigInt?
  createdAt     DateTime @default(now())

  // Relations
  uploader          User?                        @relation(fields: [uploadedBy], references: [id], name: "DocumentUploader")
  deathRegDocuments DeathRegistrationDocument[]
  permitDocuments   PermitDocument[]
  certReqDocuments  CertificateRequestDocument[]

  @@map("documents")
}

model DeathRegistrationDocument {
  id             Int      @id @default(autoincrement())
  registrationId Int
  documentId     Int
  docType        String
  uploadedAt     DateTime @default(now())

  // Relations
  registration DeathRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  document     Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("death_registration_documents")
}

model PermitDocument {
  id         Int      @id @default(autoincrement())
  permitId   Int
  documentId Int
  docType    String
  uploadedAt DateTime @default(now())

  // Relations
  permit   PermitRequest @relation(fields: [permitId], references: [id], onDelete: Cascade)
  document Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("permit_documents")
}

model CertificateRequestDocument {
  id            Int      @id @default(autoincrement())
  certRequestId Int
  documentId    Int
  docType       String
  uploadedAt    DateTime @default(now())

  // Relations
  certRequest CertificateRequest @relation(fields: [certRequestId], references: [id], onDelete: Cascade)
  document    Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("certificate_request_documents")
}

model Payment {
  id              Int           @id @default(autoincrement())
  moduleRef       String
  moduleId        Int
  amount          Decimal
  currency        String        @default("PHP")
  paymentStatus   PaymentStatus @default(UNPAID)
  paymentMethod   String?
  orNumber        String?
  proofDocumentId Int?
  paidBy          Int?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  payer               User?                @relation(fields: [paidBy], references: [id])
  deathRegistrations  DeathRegistration[]
  permitRequests      PermitRequest[]
  certificateRequests CertificateRequest[]

  @@map("payments")
}

model Cemetery {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  address         String?
  city            String?
  postalCode      String?
  establishedDate DateTime?
  totalArea       Float?
  boundary        Json? // Store boundary coordinates as JSON
  standardPrice   Decimal   @default(5000.00)
  largePrice      Decimal   @default(8000.00)
  familyPrice     Decimal   @default(15000.00)
  nichePrice      Decimal   @default(3000.00)
  maintenanceFee  Decimal   @default(500.00)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  sections CemeterySection[]
  plots    CemeteryPlot[]

  @@map("cemeteries")
}

model CemeterySection {
  id          Int      @id @default(autoincrement())
  cemeteryId  Int
  name        String
  description String?
  capacity    Int      @default(100)
  boundary    Json? // Store boundary coordinates as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cemetery Cemetery        @relation(fields: [cemeteryId], references: [id], onDelete: Cascade)
  blocks   CemeteryBlock[]
  plots    CemeteryPlot[]

  @@map("cemetery_sections")
}

model CemeteryBlock {
  id        Int       @id @default(autoincrement())
  sectionId Int
  name      String
  blockType BlockType @default(STANDARD)
  capacity  Int       @default(50)
  boundary  Json? // Store boundary coordinates as JSON
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  section CemeterySection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  plots   CemeteryPlot[]

  @@map("cemetery_blocks")
}

model CemeteryPlot {
  id             Int         @id @default(autoincrement())
  cemeteryId     Int?
  sectionId      Int?
  blockId        Int?
  plotNumber     String?
  section        String? // Keep for backward compatibility
  block          String? // Keep for backward compatibility
  lot            String?
  plotCode       String?     @unique
  size           PlotSize    @default(STANDARD)
  length         Float       @default(2.0)
  width          Float       @default(1.0)
  depth          Float       @default(1.5)
  latitude       Decimal?
  longitude      Decimal?
  boundary       Json?       // Store plot boundary coordinates as JSON
  status         PlotStatus  @default(VACANT)
  reservedBy     Int?
  reservedUntil  DateTime?
  baseFee        Decimal     @default(5000.00)
  maintenanceFee Decimal     @default(500.00)
  orientation    Orientation @default(NORTH)
  accessibility  Boolean     @default(true)
  maxLayers      Int         @default(3)
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  cemetery    Cemetery?        @relation(fields: [cemeteryId], references: [id])
  section_rel CemeterySection? @relation(fields: [sectionId], references: [id])
  block_rel   CemeteryBlock?   @relation(fields: [blockId], references: [id])
  reserver    User?            @relation(fields: [reservedBy], references: [id], name: "PlotReserver")
  assignments PlotAssignment[]
  gravestones Gravestone[]

  @@map("cemetery_plots")
}

model Gravestone {
  id            Int                 @id @default(autoincrement())
  plotId        Int
  material      GravestoneMaterial  @default(GRANITE)
  condition     GravestoneCondition @default(GOOD)
  inscription   String?
  dateInstalled DateTime?
  manufacturer  String?
  height        Float?
  width         Float?
  thickness     Float?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relations
  plot CemeteryPlot @relation(fields: [plotId], references: [id], onDelete: Cascade)

  @@map("gravestones")
}

model PlotAssignment {
  id         Int              @id @default(autoincrement())
  plotId     Int
  deceasedId Int?
  permitId   Int?
  assignedBy Int?
  layer      Int              @default(1) // Burial layer (1=ground, 2=second level, etc.)
  assignedAt DateTime         @default(now())
  status     AssignmentStatus @default(ASSIGNED)
  notes      String?

  // Relations
  plot     CemeteryPlot    @relation(fields: [plotId], references: [id], onDelete: Cascade)
  deceased DeceasedRecord? @relation(fields: [deceasedId], references: [id])
  permit   PermitRequest?  @relation(fields: [permitId], references: [id])
  assigner User?           @relation(fields: [assignedBy], references: [id])

  @@map("plot_assignments")
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  actorUserId Int?
  action      String
  moduleName  String?
  referenceId Int?
  details     String?
  createdAt   DateTime @default(now())

  // Relations
  actor User? @relation(fields: [actorUserId], references: [id])

  @@map("audit_logs")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum Role {
  CITIZEN
  EMPLOYEE
  ADMIN
}

enum RegistrationType {
  REGULAR
  DELAYED
}

enum DeathRegistrationStatus {
  DRAFT
  SUBMITTED
  PENDING_VERIFICATION
  FOR_PAYMENT
  PAID
  PROCESSING
  REGISTERED
  FOR_PICKUP
  CLAIMED
  RETURNED
  REJECTED
  EXPIRED
}

enum PermitType {
  BURIAL
  EXHUMATION
  CREMATION
}

enum PermitStatus {
  DRAFT
  SUBMITTED
  PENDING_VERIFICATION
  FOR_PAYMENT
  PAID
  ISSUED
  FOR_PICKUP
  CLAIMED
  REJECTED
  CANCELLED
}

enum CertificateType {
  DEATH
  BIRTH
  MARRIAGE
  CNR
}

enum CertificateStatus {
  SUBMITTED
  FOR_PAYMENT
  PAID
  PROCESSING
  READY_FOR_PICKUP
  CLAIMED
  REJECTED
}

enum PickupStatus {
  NOT_READY
  READY_FOR_PICKUP
  CLAIMED
}

enum PaymentStatus {
  UNPAID
  PENDING
  PAID
  WAIVED
  REFUNDED
}

enum PlotStatus {
  VACANT
  RESERVED
  OCCUPIED
  BLOCKED
}

enum AssignmentStatus {
  ASSIGNED
  OCCUPIED
  EXHUMED
  REASSIGNED
}

enum BlockType {
  STANDARD
  PREMIUM
  FAMILY
  NICHE
}

enum PlotSize {
  STANDARD
  LARGE
  FAMILY
  NICHE
}

enum Orientation {
  NORTH
  SOUTH
  EAST
  WEST
}

enum GravestoneMaterial {
  GRANITE
  MARBLE
  BRONZE
  LIMESTONE
  SANDSTONE
  CONCRETE
  OTHER
}

enum GravestoneCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}
