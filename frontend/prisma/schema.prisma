// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CemeteryLayout {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  totalArea   String
  boundary    Json    // Array of [number, number] pairs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sections    CemeterySection[]
  pathways    CemeteryPathway[]
  facilities  CemeteryFacility[]

  @@map("cemetery_layouts")
}

model CemeterySection {
  id          Int      @id @default(autoincrement())
  layoutId    Int
  name        String
  description String
  coordinates Json    // Array of [number, number] pairs
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  layout      CemeteryLayout @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  blocks      CemeteryBlock[]

  @@map("cemetery_sections")
}

model CemeteryBlock {
  id          Int      @id @default(autoincrement())
  sectionId   Int
  name        String
  coordinates Json    // Array of [number, number] pairs
  maxPlots    Int
  plotSize    String
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  section     CemeterySection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("cemetery_blocks")
}

model CemeteryPathway {
  id          Int      @id @default(autoincrement())
  layoutId    Int
  name        String
  coordinates Json    // Array of [number, number] pairs
  width       Int
  type        String  // 'main' | 'secondary' | 'pedestrian'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  layout      CemeteryLayout @relation(fields: [layoutId], references: [id], onDelete: Cascade)

  @@map("cemetery_pathways")
}

model CemeteryFacility {
  id          Int      @id @default(autoincrement())
  layoutId    Int
  name        String
  type        String  // 'office' | 'chapel' | 'restroom' | 'parking' | 'maintenance' | 'entrance' | 'other'
  coordinates Json    // Single [number, number] pair
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  layout      CemeteryLayout @relation(fields: [layoutId], references: [id], onDelete: Cascade)

  @@map("cemetery_facilities")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  passwordHash  String?
  role          Role     @default(CITIZEN)
  fullNameFirst String
  fullNameMiddle String?
  fullNameLast  String
  nameSuffix    String?
  contactNo     String?
  address       String?
  organization  String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Social login providers
  googleId      String?
  facebookId    String?

  // Relations
  deathRegistrations    DeathRegistration[]
  permitRequests        PermitRequest[]
  certificateRequests   CertificateRequest[]
  auditLogs             AuditLog[]
  notifications         Notification[]
  plotReservations      CemeteryPlot[] @relation("PlotReserver")

  @@map("users")
}

model DeceasedRecord {
  id              Int      @id @default(autoincrement())
  firstName       String
  middleName      String?
  lastName        String
  suffix          String?
  sex             String?
  dateOfBirth     DateTime?
  dateOfDeath     DateTime?
  age             Int?
  placeOfDeath    String?
  residenceAddress String?
  citizenship     String?
  civilStatus     String?
  occupation      String?
  causeOfDeath    String?
  covidRelated    Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  deathRegistrations DeathRegistration[]
  permitRequests     PermitRequest[]
  certificateRequests CertificateRequest[]
  plotAssignments    PlotAssignment[]

  @@map("deceased_records")
}

model CemeteryPlot {
  id            Int      @id @default(autoincrement())
  cemeteryName  String   @default("Quezon City Public Cemetery")
  section       String?
  block         String?
  lot           String?
  plotCode      String?  @unique
  size          String?
  latitude      Decimal?
  longitude     Decimal?
  status        PlotStatus @default(VACANT)
  reservedBy    Int?
  reservedUntil DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  reserver      User?    @relation(fields: [reservedBy], references: [id], name: "PlotReserver")
  assignments   PlotAssignment[]

  @@map("cemetery_plots")
}

model PlotAssignment {
  id          Int      @id @default(autoincrement())
  plotId      Int
  deceasedId  Int?
  permitId    Int?
  assignedBy  Int?
  assignedAt  DateTime @default(now())
  status      AssignmentStatus @default(ASSIGNED)
  notes       String?

  // Relations
  plot        CemeteryPlot @relation(fields: [plotId], references: [id], onDelete: Cascade)
  deceased    DeceasedRecord? @relation(fields: [deceasedId], references: [id])
  permit      PermitRequest? @relation(fields: [permitId], references: [id])

  @@map("plot_assignments")
}

// Enums
enum Role {
  CITIZEN
  EMPLOYEE
  ADMIN
}

enum PlotStatus {
  VACANT
  RESERVED
  OCCUPIED
  UNAVAILABLE
}

enum AssignmentStatus {
  ASSIGNED
  OCCUPIED
  TERMINATED
}

enum PermitType {
  BURIAL
  DISINTERMENT
  TRANSFER
  MEMORIAL
}

enum PermitStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum PickupStatus {
  NOT_READY
  READY_FOR_PICKUP
  PICKED_UP
}

enum CertificateType {
  DEATH_CERTIFICATE
  BURIAL_CERTIFICATE
  PLOT_OWNERSHIP
}

enum CertificateStatus {
  REQUESTED
  IN_PREPARATION
  READY_FOR_PICKUP
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
}

// Additional models (simplified for this example)
model PermitRequest {
  id              Int      @id @default(autoincrement())
  permitType      PermitType
  citizenUserId   Int?
  deathId         Int?
  status          PermitStatus @default(SUBMITTED)
  amountDue       Decimal  @default(0.00)
  paymentId       Int?
  paymentOrderNo  String?
  orNumber        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  issuedAt        DateTime?
  issuedBy        Int?
  pickupRequired  Boolean  @default(true)
  pickupStatus    PickupStatus @default(NOT_READY)
  remarks         String?

  // Relations
  citizen         User?    @relation(fields: [citizenUserId], references: [id])
  deceased        DeceasedRecord? @relation(fields: [deathId], references: [id])
  payment         Payment? @relation(fields: [paymentId], references: [id])
  plotAssignments PlotAssignment[]

  @@map("permit_requests")
}

model DeathRegistration {
  id              Int      @id @default(autoincrement())
  citizenUserId   Int?
  deceasedId      Int?
  status          String   @default("SUBMITTED")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  citizen         User?    @relation(fields: [citizenUserId], references: [id])
  deceased        DeceasedRecord? @relation(fields: [deceasedId], references: [id])

  @@map("death_registrations")
}

model CertificateRequest {
  id              Int      @id @default(autoincrement())
  certificateType CertificateType
  citizenUserId   Int?
  deceasedId      Int?
  status          CertificateStatus @default(REQUESTED)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  citizen         User?    @relation(fields: [citizenUserId], references: [id])
  deceased        DeceasedRecord? @relation(fields: [deceasedId], references: [id])

  @@map("certificate_requests")
}

model Payment {
  id              Int      @id @default(autoincrement())
  amount          Decimal
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  permits         PermitRequest[]

  @@map("payments")
}

model AuditLog {
  id              Int      @id @default(autoincrement())
  userId          Int?
  action          String
  entityType      String
  entityId        String
  changes         Json?
  createdAt       DateTime @default(now())

  // Relations
  user            User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Notification {
  id              Int      @id @default(autoincrement())
  userId          Int?
  title           String
  message         String
  isRead          Boolean  @default(false)
  createdAt       DateTime @default(now())

  // Relations
  user            User?    @relation(fields: [userId], references: [id])

  @@map("notifications")
}